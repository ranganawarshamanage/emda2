""""
Plot spherical harmonics generated by ProSHADE program.
Change the data input and run in Python.
Plot is 3D interactive.

v1: 20.08.2021
"""

from __future__ import annotations
import numpy as np

def getdata_proshade(structureFilename, structureFold):
    import proshade
    
    structureReSampleMap = True
    computationResolution = 6
    ### Create the settings object
    pSet = proshade.ProSHADE_settings ( )
    ### Apply the user supplied settings
    pSet.task = proshade.Symmetry
    pSet.setResolution( computationResolution )
    pSet.setMapResolutionChange( structureReSampleMap )
    pSet.verbose = 3
    ### Read in the structure
    pStruct = proshade.ProSHADE_data ( )
    pStruct.readInStructure ( structureFilename, 0, pSet )
    pSet.addExtraSpace = 10.0
    ### Do all the required computations in correct order
    pStruct.processInternalMap( pSet )
    pStruct.mapToSpheres( pSet )
    pStruct.computeSphericalHarmonics( pSet )
    pStruct.computeRotationFunction( pSet )

    for i, fold in enumerate(structureFold):
        if i == 0:
            sphereMappedData= proshade.getRotationFunctionSpheres ( pStruct, fold )
            _, n, m = sphereMappedData.shape
            alldata = np.zeros((1,n,m), 'float')
        else:
            sphereMappedData= proshade.getRotationFunctionSpheres ( pStruct, fold )
        alldata += sphereMappedData[0,:,:]
    return alldata

def axes(axis, vmax, clr='black', wdth=3): 
    import plotly.graph_objects as go
    vmin = -vmax
    if axis.lower() == 'x':
        xcrd=[i*0.1 for i in range(vmin, vmax, 1)]
        ycrd=[i*0. for i in range(vmin, vmax, 1)]
        zcrd=[i*0. for i in range(vmin, vmax, 1)]
    elif axis.lower() == 'y':
        xcrd=[i*0. for i in range(vmin, vmax, 1)]
        ycrd=[i*0.1 for i in range(vmin, vmax, 1)]
        zcrd=[i*0. for i in range(vmin, vmax, 1)]
    elif axis.lower() == 'z':
        xcrd=[i*0. for i in range(vmin, vmax, 1)]
        ycrd=[i*0. for i in range(vmin, vmax, 1)]
        zcrd=[i*0.1 for i in range(vmin, vmax, 1)]
    else:
        raise SystemExit("Invalid axis label")
    trace = go.Scatter3d(x=xcrd, y=ycrd, z=zcrd, marker=dict(size=0.1), line=dict(color=clr,width=wdth))
    return trace

def axes_at_corner(axis, vmax, clr='black', wdth=3): 
    import plotly.graph_objects as go
    vmin = -20
    vmax = -15
    if axis.lower() == 'x':
        xcrd=[i*0.1 for i in range(vmin, vmax, 1)]
        ycrd=[-2+i*0. for i in range(vmin, vmax, 1)]
        zcrd=[-2+i*0. for i in range(vmin, vmax, 1)]
    elif axis.lower() == 'y':
        xcrd=[-2+i*0. for i in range(vmin, vmax, 1)]
        ycrd=[i*0.1 for i in range(vmin, vmax, 1)]
        zcrd=[-2+i*0. for i in range(vmin, vmax, 1)]
    elif axis.lower() == 'z':
        xcrd=[-2+i*0. for i in range(vmin, vmax, 1)]
        ycrd=[-2+i*0. for i in range(vmin, vmax, 1)]
        zcrd=[i*0.1 for i in range(vmin, vmax, 1)]
    else:
        raise SystemExit("Invalid axis label")
    trace = go.Scatter3d(x=xcrd, y=ycrd, z=zcrd, marker=dict(size=0.1), line=dict(color=clr,width=wdth))
    return trace

def annot(xcrd, ycrd, zcrd, txt, xancr='left'):
    strng=dict(showarrow=False, x=xcrd, y=ycrd, z=zcrd, text=txt, xanchor=xancr, font=dict(color='black',size=16))
    return strng

def plot3d_plotly_test(data):
    # plot data in spherical coordinates
    import plotly.graph_objects as go
    import plotly.offline as offline
    
    n, m = data.shape

    # Meshing a unit sphere according to n, m 
    theta = np.linspace(0, 2 * np.pi, num=n)
    phi = np.linspace(-np.pi/2, np.pi/2, num=m)
    theta, phi = np.meshgrid(theta, phi)
    # NOTE: phi angle follows MATLAB convention
    x, y, z = np.cos(phi)*np.cos(theta), np.cos(phi)*np.sin(theta), np.sin(phi)
    # main traces
    trace1 = go.Surface(z=z, x=x, y=y, surfacecolor=data, cmin=0., cmax=1.0, opacity=1.0)
    vmax = 20
    """ trace_x = axes("X", vmax, clr="red")
    trace_y = axes("Y", vmax, clr="green")
    trace_z = axes("Z", vmax, clr="blue") """
    trace_x = axes_at_corner("X", vmax, clr="red")
    trace_y = axes_at_corner("Y", vmax, clr="green")
    trace_z = axes_at_corner("Z", vmax, clr="blue")
    layout = go.Layout(
        showlegend=False,
        scene = dict(xaxis=dict(#title='X', 
                                #titlefont_color='black', 
                                #range=[-1.5,1.5], 
                                backgroundcolor='white',
                                color='white',
                                gridcolor='white',
                                showgrid=False
                                ),
                    yaxis=dict(#title='Y',
                               #titlefont_color='black',
                               #range=[-1.5,1.5],
                               backgroundcolor='white',
                               color='white',
                               gridcolor='white',
                               showgrid=False
                               ),
                    zaxis=dict(#title='Z',
                               #titlefont_color='black', 
                               #range=[-1.5,1.5],
                               backgroundcolor='white',
                               color='white', 
                               gridcolor='white',
                               showgrid=False
                               ),
                    annotations=[
                                # plot XYZ axes on the sphere
                                #annot(vmax/10, 0, 0, 'X'),
                                #annot(0, vmax/10, 0, 'Y'),
                                #annot(0, 0, vmax/10, 'Z'),
                                # plot XYZ axes at corner
                                annot(-1.5, -2, -2, 'X'),
                                annot(-2, -1.5, -2, 'Y'),
                                annot(-2, -2, -1.5, 'Z'),
                                ]
                               ),
        )
    fig = go.Figure(
                    data=[trace1, 
                        trace_x, 
                        trace_y, 
                        trace_z, 
                        ],
                    layout=layout)
    plot = offline.plot(fig, filename="emda_spherical_plot.html")


if __name__ == "__main__":

    imap = "/Users/ranganaw/MRC/REFMAC/symmetry/testcases/EMD-20690/emda_rbxfullmap_emd-20690.mrc"
    fold = [2, 3, 4]
    data = getdata_proshade(imap, fold)
    print(data.shape)
    norm = np.mean(data)
    for i in range(data.shape[0]):
        plot3d_plotly_test(data[i,:,:])
